openapi: 3.0.3
info:
  title: UrbanUtopia API
  version: 1.0.0
  description: API documentation for UrbanUtopia endpoints.
tags:
  - name: Health Check
    description: API health check endpoints
  - name: Auth
    description: Authentication and user management endpoints
  - name: Listing
    description: Listing management endpoints
  - name: Review
    description: Review management endpoints
servers:
  - url: https://urbanutopia-q4lw.onrender.com/
paths:
  # =========================
  # Health Check Route
  # =========================

  /:
    get:
      tags:
        - Health Check
      summary: Health Check
      description: Returns API health status.
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  # =========================
  # Auth Routes
  # =========================

  /api/v1/user/create:
    post:
      tags:
        - Auth
    post:
      summary: Register a new user
      description: Creates a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input or user not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/user/login:
    post:
      tags:
        - Auth
    post:
      summary: Login user
      description: Authenticates a user and returns user data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/user/{id}:
    get:
      tags:
        - Auth
      summary: Get user by ID
      description: Returns user details for the given user ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Auth
      summary: Update user by ID
      description: Updates user details for the given user ID. Only the user can update their own profile.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Auth
    get:
      summary: Get user by ID
      description: Returns user details for the given user ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update user by ID
      description: Updates user details for the given user ID. Only the user can update their own profile.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete user by ID
      description: Deletes the user account for the given user ID. Only the user can delete their own account.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/user/logout:
    get:
      tags:
        - Auth
    get:
      summary: Logout user
      description: Logs out the current user.
      responses:
        "200":
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "400":
          description: Logout failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # =========================
  # Listing Routes
  # =========================

  /api/v1/listing/all:
    get:
      tags:
        - Listing
    get:
      summary: Get all listings
      description: Returns all listings. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/create:
    post:
      tags:
        - Listing
    post:
      summary: Create a new listing
      description: Creates a new listing. Requires authentication, validation, and file upload.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingCreate"
      responses:
        "201":
          description: Listing created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/{id}/view:
    get:
      tags:
        - Listing
    get:
      summary: Get listing by ID
      description: Returns details of a listing by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Listing details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponse"
        "404":
          description: Listing not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/{id}/edit:
    patch:
      tags:
        - Listing
    patch:
      summary: Edit listing by ID
      description: Updates a listing by its ID. Only the owner can edit. Requires authentication, validation, and file upload.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingUpdate"
      responses:
        "200":
          description: Listing updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponse"
        "400":
          description: Update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/delete:
    delete:
      tags:
        - Listing
    delete:
      summary: Delete listing by ID
      description: Deletes a listing by its ID. Only the owner can delete. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Listing deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingResponse"
        "400":
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/reset_db:
    get:
      tags:
        - Listing
    get:
      summary: Reset listings database
      description: Resets and initializes the listings database with sample data. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Listings initialized successfully
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # =========================
  # Review Routes
  # =========================

  /api/v1/listing/review/{id}/review/create:
    post:
      tags:
        - Review
    post:
      summary: Create a review for a listing
      description: Creates a review for the specified listing. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreate"
      responses:
        "200":
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "400":
          description: Invalid input or reviewId not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/review/{id}/review/all:
    get:
      tags:
        - Review
    get:
      summary: Get all reviews for a listing
      description: Returns all reviews for the specified listing.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of reviews for the listing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewListResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/review/{id}/review/{rid}/update:
    patch:
      tags:
        - Review
    patch:
      summary: Update a review for a listing
      description: Updates a review by review ID for the specified listing. Only the review owner can update. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: rid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdate"
      responses:
        "201":
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "400":
          description: Data not found or review not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Review not updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Review update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/listing/review/{id}/review/{rid}/delete:
    delete:
      tags:
        - Review
    delete:
      summary: Delete a review for a listing
      description: Deletes a review by review ID for the specified listing. Only the review owner can delete. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: rid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Review deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "400":
          description: Data not found or review not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Review deletion failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        image:
          type: object
          properties:
            url:
              type: string
            filename:
              type: string

    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
            email:
              type: string
            image:
              type: object
              properties:
                url:
                  type: string
                filename:
                  type: string
        message:
          type: string

    LogoutResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: User Logout Successfully.

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
        error:
          type: string
          nullable: true
    Listing:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        price:
          type: number
        location:
          type: string
        image:
          type: object
          properties:
            url:
              type: string
            filename:
              type: string
        geometry:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
              items:
                type: number
        owner:
          type: string
        reviews:
          type: array
          items:
            type: string

    ListingCreate:
      type: object
      required:
        - title
        - description
        - price
        - location
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        location:
          type: string

    ListingUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        location:
          type: string
        image:
          type: object
          properties:
            url:
              type: string
            filename:
              type: string

    ListingResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: "#/components/schemas/Listing"
        message:
          type: string
    Review:
      type: object
      properties:
        _id:
          type: string
        listingId:
          type: string
        userId:
          type: string
        owner:
          type: string
        rating:
          type: integer
        comment:
          type: string

    ReviewCreate:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: integer
        comment:
          type: string

    ReviewUpdate:
      type: object
      properties:
        rating:
          type: integer
        comment:
          type: string

    ReviewResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: "#/components/schemas/Review"
        message:
          type: string

    ReviewListResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        message:
          type: string
